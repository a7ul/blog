{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/graphql-auth/","result":{"data":{"site":{"siteMetadata":{"title":"Blog","author":"Atul R"}},"markdownRemark":{"id":"760ea8de-2aa0-5086-95e7-4ef3a6ddb511","excerpt":"GraphQL is a great way to build strongly typed, self documenting applications. One of the key concepts in GraphQL is that the server provides a single endpoint where it exposes all the data in a graph like structure that the clients can request from…","html":"<p>GraphQL is a great way to build strongly typed, self documenting applications. One of the key concepts in GraphQL is that the server provides a single endpoint where it exposes all the data in a graph like structure that the clients can request from.\nHence, our application needs to control who (authentication) can see and interact with what parts (authorization) of the data it provides.</p>\n<p>There are multiple ways to introduce authentication and authorization into our GraphQL application. In this post we will be design our GraphQL application security with the following characteristics:</p>\n<ul>\n<li><strong>Declarative</strong> - We define all the access control rules in the schema itself. This makes it easier to understand and maintain the access declaratively as the schema evolves. Effectively, our schema also becomes the source of truth for the access control rules.</li>\n<li><strong>Role based access control (RBAC)</strong> - Allow users to access different parts of the data based on their role.</li>\n<li><strong>Deny first and explicit authorization</strong> - Following the principle of least privilege, we would like to deny access to fields that are not explicitly authorized. This is a good way to prevent accidental access to sensitive data.</li>\n</ul>\n<p>These could be implemented in any language that supports GraphQL. In this post, we will be using <a href=\"https://www.apollographql.com/\">Apollo</a> to see how we can implement these concepts.</p>\n<h1 id=\"authentication\" style=\"position:relative;\"><a href=\"#authentication\" aria-label=\"authentication permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authentication</h1>\n<blockquote>\n<p><strong>Authentication</strong> is determining if a given user is logged in, and subsequently determining who the user is.</p>\n</blockquote>\n<p>Typically, when a request comes in, it goes through the following layers inside a typical GraphQL server:</p>\n<div class=\"mermaid\">flowchart LR\n    mobile(\\n Client \\n\\n):::class_client <==> schema(\\n Schema \\n\\n):::class_gql_component\n    subgraph gql[GraphQL]\n      schema --> context(\\n Context \\n\\n):::class_gql_component\n      context --> resolvers(\\n Resolvers \\n\\n):::class_gql_component\n    end\n    resolvers <==> data[(\\n Data \\n Layer \\n)]:::class_datalayer\n\n    classDef class_client color:#fff,fill:#007ed2,stroke:#000,stroke-width:2px\n    classDef class_gql_component color:#000,fill:#fff,stroke:#000,stroke-width:2px\n    classDef class_datalayer color:#fff,fill:#388564,stroke:#000,stroke-width:2px\n    style gql color:#fff,fill:#a24ccd,stroke:#000,stroke-width:2px</div>\n<ul>\n<li><strong>Schema</strong>: The schema layer parses the GraphQL query and determines if the query is valid.</li>\n<li><strong>Context</strong>: The context layer is responsible for setting up a context object that is passed to all the resolvers of the query. A new context is created for every request.</li>\n<li><strong>Resolvers</strong>: The resolvers layer contain the business logic to fetch and transform data to be returned to the client.</li>\n</ul>\n<br/>\n<p>Since GraphQL is unopinionated about the authentication process, we can implement authentication at various stages of the request lifecycle. But ideally, we should be authenticating our users as early as possible. We could also use many different authentication methods, such as JWT, OpenID Connect, etc. Here, we will not cover these methods but focus on GraphQL.</p>\n<p>Lets take few scenarios.</p>\n<h2 id=\"apollo-server-apollo-server\" style=\"position:relative;\"><a href=\"#apollo-server-apollo-server\" aria-label=\"apollo server apollo server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>apollo-server (Apollo Server)</h2>\n<p>If you are using the standalone Apollo Server to run your application, you could authenticate the user in the context layer like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloServer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-server'</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">context</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> req <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get the user token from the headers.</span>\n    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>authorization <span class=\"token operator\">||</span> <span class=\"token string\">''</span>\n\n    <span class=\"token comment\">// Try to retrieve a user with the token</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// The resolvers can now access the user via the context</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🚀 Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"apollo-server-express-apollo-server-express\" style=\"position:relative;\"><a href=\"#apollo-server-express-apollo-server-express\" aria-label=\"apollo server express apollo server express permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>apollo-server-express (Apollo Server Express)</h2>\n<p>In the case of Apollo Server with Express or similar, you can authenticate the user even before the request reaches the apollo server.\nHence, here if the jwt is expired we could return early with a 401 error to the client.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-server-express'</span>\n<span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> expressjwt <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'express-jwt'</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">startApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">typeDefs<span class=\"token punctuation\">,</span> resolvers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 1. Authenticate the user before passing request to apollo server</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">expressjwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      secret<span class=\"token operator\">:</span> <span class=\"token string\">'jwt-secret'</span><span class=\"token punctuation\">,</span>\n      credentialsRequired<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      algorithms<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'HS256'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    typeDefs<span class=\"token punctuation\">,</span>\n    resolvers<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">context</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> req <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 2. Map the authenticated user from express to the context</span>\n      user<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">await</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> app <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> port<span class=\"token operator\">:</span> <span class=\"token number\">3000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🚀 Server ready at http://localhost:3000</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>server<span class=\"token punctuation\">.</span>graphqlPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">startApolloServer</span><span class=\"token punctuation\">(</span>typeDefs<span class=\"token punctuation\">,</span> resolvers<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"infrastructure-layer\" style=\"position:relative;\"><a href=\"#infrastructure-layer\" aria-label=\"infrastructure layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Infrastructure layer</h2>\n<p>We could also go one step further and authenticate the user even before the request reaches our application. Maybe at the nginx / loadbalancer level.</p>\n<h1 id=\"authorization\" style=\"position:relative;\"><a href=\"#authorization\" aria-label=\"authorization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authorization</h1>\n<blockquote>\n<p><strong>Authorization</strong> is determining what a given user has permission to do or see.</p>\n</blockquote>\n<p>After a request is authenticated and the user is known, we can determine what the user has access to.</p>\n<h2 id=\"basic-all-or-nothing-approach\" style=\"position:relative;\"><a href=\"#basic-all-or-nothing-approach\" aria-label=\"basic all or nothing approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic all or nothing approach</h2>\n<p>In the initial stages of building our GraphQL application, the most basic approach we can do is deny unauthorized or users with incorrect roles the ability to execute a query at all. Since this is an all or nothing approach, it could also be used in highly restrictive environments that provide no publicly accessible fields or like an internal tool or an independent microservice that shouldn’t be exposed to the public.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">context</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> req <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// try to retrieve a user with the token</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Block if non authenticated users should not be allowed to access any data</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you must be logged in'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Also check user roles/permissions inside the retrieved user here</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span>roles<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ForbiddenError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you must be an admin'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// add the user to the context</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"role-based-access-control-or-rbac\" style=\"position:relative;\"><a href=\"#role-based-access-control-or-rbac\" aria-label=\"role based access control or rbac permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Role based access control or RBAC</h2>\n<p>Typically as the project grows we would have users with different roles. For example, we could have users with roles such as <strong>employee</strong>, <strong>customer</strong>, <strong>guest</strong> or even other <strong>services</strong> etc. The basic all or nothing approach would then not be able to cut it. Along with users with different roles, we would also have growing types of data with different access requirements.</p>\n<p>In order to support role based access to different parts of our GraphQL schema (and hence different types of data), we can think about authorization in terms of <strong>roles</strong> and <strong>permissions</strong>.</p>\n<h3 id=\"roles\" style=\"position:relative;\"><a href=\"#roles\" aria-label=\"roles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Roles</h3>\n<p>Roles are identifiers assigned to different users of the application to restrict their access. For example, we can assign an employee the role <strong>employee</strong> and a customer the role <strong>customer</strong>. In practice, this could also be more complex with users having multiple roles like <strong>[“employee”, “roles-editor”]</strong> or <strong>[“employee-readonly”, “billing-manager”]</strong>, etc.</p>\n<p>if we are using JWTs for auth then we could even assign them as part of the payload of a user’s jwt token:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hawkeye\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"employee\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"roles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"employee\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"roles-editor\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1654104898</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1656696898</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"permissions\" style=\"position:relative;\"><a href=\"#permissions\" aria-label=\"permissions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Permissions</h3>\n<p>Permissions are identifiers assigned to different groups of data in your application. We would assign permissions to each field in the GraphQL schema to mark its access requirements. The idea is to use a <strong>@auth</strong> GraphQL schema directive to annotate permissions for each field (We will look at <strong>@auth</strong>’s implementation in a bit).</p>\n<p>For example, consider a GraphQL schema with the following <strong>@auth</strong> anotations:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">directive</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">on</span> <span class=\"token constant\">FIELD_DEFINITION</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Should only be accessible by employees with read access to customer data</span>\n  <span class=\"token attr-name\">customers</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">]</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"customer:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># Should only be accessible only to the currently logged in customer</span>\n  <span class=\"token attr-name\">me</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Customer</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"self:customer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Should be accessible to all users</span>\n  <span class=\"token attr-name\">login</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AccessToken</span><span class=\"token operator\">!</span>\n\n  <span class=\"token comment\"># Should only be accessible by employees with write access to customer data</span>\n  <span class=\"token attr-name\">updateCustomer</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">customerId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Customer</span>\n    <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"customer:write\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># Should only be accessible to an employee with higher privileges</span>\n  <span class=\"token attr-name\">updateEmployeeRole</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">employeeId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">role</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Boolean</span>\n    <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"iam:write\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AccessToken</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">token</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">internalNote</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"notes:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, each field has a permission assigned to it. There are few scenarios here:</p>\n<ul>\n<li><strong>customers</strong> field should only be accessible to users with the permission <code class=\"language-text\">customer:read</code>.</li>\n<li><strong>me</strong> field should only be accessible to the currently logged in customer. Here we annotated the field with a <code class=\"language-text\">self:customer</code> permission. This could be any string, but in our auth system, lets consider this to be a special purpose permission which would only be assigned to the customers. Hence, any field annotated with <code class=\"language-text\">self:customer</code> will only be accessible to the currently logged in customer and not to any other user.</li>\n<li><strong>login</strong> mutation has no permissions assigned to it and hence it should be accessible to all users</li>\n<li><strong>updateCustomer</strong> mutation should only be accessible to employees with the permission <code class=\"language-text\">customer:write</code>.</li>\n<li><strong>updateEmployeeRole</strong> mutation should only be accessible to certain employees with higher privileges (with the permission <code class=\"language-text\">iam:write</code>).</li>\n<li><strong>Customer.internalNotes</strong> field should only be accessible to employees with the permission <code class=\"language-text\">notes:read</code> and not to the customer too. It also shows, that we should be able to restrict access at any level of the GraphQL schema.</li>\n</ul>\n<h3 id=\"linking-roles-and-permissions\" style=\"position:relative;\"><a href=\"#linking-roles-and-permissions\" aria-label=\"linking roles and permissions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linking roles and permissions</h3>\n<p>Now in order to link roles to these permissions, we can think of roles as a <em>collection</em> of permissions.\nExtending the previous example, the mapping of roles to permissions could look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"anonymous\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"customer\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"self:customer\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"employee\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"customer:read\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"customer:write\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"notes:read\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"employee-readonly\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"customer:read\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"notes:read\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"roles-editor\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"iam:write\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"profile-service\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"customer:read\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here,</p>\n<ul>\n<li><strong>anonymous</strong> role has no permissions assigned to it. This could be the default role for all users. Hence they would only have access to the public fields.</li>\n<li><strong>customer</strong> role could have only the special purpose permission <strong>self:customer</strong> assigned to it. This way they would only have access to fields marked with <strong>self:customer</strong>.</li>\n<li>We could also have multiple roles assigned to a user. For example an employee could have read only access with <strong>employee-readonly</strong> role, while another employee could have higher privilege with roles such as <strong>employee</strong> and <strong>roles-editor</strong>.</li>\n<li><strong>profile-service</strong> Another use case of the roles system could be to provide access to other interal / external services to only certain parts of the GraphQL schema. Here, if we imagine a hypothetical <strong>profile-service</strong> that would have the role <strong>profile-service</strong>. With this role, it would only have read access to the customer data since it only has <strong>customer:read</strong> permission.</li>\n</ul>\n<p>Separating roles and permissions provides us with a lot of flexibility in managing role based access to our GraphQL schema.\nRoles reflect the type of users in the business while permissions usually are closer to the type of data we have.\nBoth roles and permissions evolve independently over time as the type of users and data grows. Hence, as we scale our application, the roles-permission mapping enables us to have a fine grained and granular access control mechanism for our data and users.</p>\n<h1 id=\"implementation-of-auth\" style=\"position:relative;\"><a href=\"#implementation-of-auth\" aria-label=\"implementation of auth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementation of @auth</h1>\n<h2 id=\"field-level-authorization\" style=\"position:relative;\"><a href=\"#field-level-authorization\" aria-label=\"field level authorization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Field level authorization</h2>\n<p>As mentioned above, for authorization, we will be using the <strong>@auth</strong> schema directive to annotate permissions for each field. A schema directive in GraphQL decorates part of the GraphQL schema with additional configuration in order to add custom functionality. More details about directives here: <a href=\"https://www.apollographql.com/docs/apollo-server/schema/directives/\">https://www.apollographql.com/docs/apollo-server/schema/directives/</a></p>\n<p>Our aim is to implement a <strong>@auth</strong> schema directive to perform authorization on a field before our query is executed by its resolvers.</p>\n<p>In order to implement a schema directive for fields we will first need to declare it in our schema.\nOnce declared, we can then go ahead and annotate our fields with the <strong>@auth</strong> directive.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token comment\"># Definition</span>\n<span class=\"token keyword\">directive</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">on</span> <span class=\"token constant\">FIELD_DEFINITION</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Usage</span>\n  <span class=\"token attr-name\">customers</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">]</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"customer:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In order to implement @auth directive’s functionality, we would need to perform the following steps:</p>\n<ul>\n<li>Parse the GraphQL schema and walk through each field</li>\n<li>When we encounter a field with <strong>@auth</strong> directive, we will replace the field’s resolver with a custom resolver.</li>\n<li>The custom resolver’s job would be to check if a user has the required permissions and if they do, call the field’s original resolver and return the result. If the user doesn’t have the required permissions, we would throw an error.</li>\n</ul>\n<h3 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h3>\n<p>We would need to install the following packages:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install @graphql-tools/schema @graphql-tools/utils</code></pre></div>\n<p>Next, lets create a <code class=\"language-text\">getAuthorizedSchema</code> function that will take a GraphQL schema as input and return a new schema with the <strong>@auth</strong> directive implemented.</p>\n<p><strong>src/graphql/directives.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mapSchema<span class=\"token punctuation\">,</span> getDirective<span class=\"token punctuation\">,</span> MapperKind <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@graphql-tools/utils'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAuthorizedSchema</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">schema</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> authorizedSchema <span class=\"token operator\">=</span> <span class=\"token function\">mapSchema</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Executes once for each object field definition in the schema</span>\n    <span class=\"token punctuation\">[</span>MapperKind<span class=\"token punctuation\">.</span><span class=\"token constant\">OBJECT_FIELD</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fieldConfig</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 1. Try to get the @auth directive config on the field</span>\n      <span class=\"token keyword\">const</span> fieldAuthDirective <span class=\"token operator\">=</span> <span class=\"token function\">getDirective</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span> fieldConfig<span class=\"token punctuation\">,</span> <span class=\"token string\">'auth'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n      <span class=\"token comment\">// 2. If a @auth directive is found, replace the field's resolver with a custom resolver</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fieldAuthDirective<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 2.1. Get the original resolver on the field</span>\n        <span class=\"token keyword\">const</span> originalResolver <span class=\"token operator\">=</span> fieldConfig<span class=\"token punctuation\">.</span>resolve <span class=\"token operator\">??</span> defaultFieldResolver\n        <span class=\"token comment\">// 2.2. Replace the field's resolver with a custom resolver</span>\n        fieldConfig<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">resolve</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>user\n          <span class=\"token keyword\">const</span> fieldPermissions <span class=\"token operator\">=</span> fieldAuthDirective<span class=\"token punctuation\">.</span>permissions\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span>fieldPermissions<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 2.3 If the user doesn't have the required permissions, throw an error</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ForbiddenError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unauthorized'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token comment\">// 2.4 Otherwise call the original resolver and return the result</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">originalResolver</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> fieldConfig\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> authorizedSchema\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>where <code class=\"language-text\">isAuthorized</code> function would check if the user has the required permissions for the field.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fieldPermissions<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> userRoles <span class=\"token operator\">=</span> user<span class=\"token operator\">?.</span>roles <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> userPermissions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 1. Expand user roles to permissions</span>\n  userRoles<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">roleKey</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> role <span class=\"token operator\">=</span> RolePermissions<span class=\"token punctuation\">[</span>roleKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> RolePermissions<span class=\"token punctuation\">.</span>anonymous\n    role<span class=\"token punctuation\">.</span>permissions<span class=\"token operator\">?.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">permission</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> userPermissions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 2. Check if atleast one of the user's permissions matches that of required for accessing the field</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> permission <span class=\"token keyword\">of</span> fieldPermissions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userPermissions<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can use the <code class=\"language-text\">getAuthorizedSchema</code> function just before apollo server is created:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">startApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">typeDefs<span class=\"token punctuation\">,</span> resolvers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create the base executable schema</span>\n  <span class=\"token keyword\">let</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">makeExecutableSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs<span class=\"token punctuation\">,</span> resolvers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Transform the schema by applying directive logic</span>\n  schema <span class=\"token operator\">=</span> <span class=\"token function\">getAuthorizedSchema</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Provide the transformed schema to the ApolloServer constructor</span>\n  <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    schema<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">context</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> req <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      user<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">await</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🚀 Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">startApolloServer</span><span class=\"token punctuation\">(</span>typeDefs<span class=\"token punctuation\">,</span> resolvers<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"code-link\" style=\"position:relative;\"><a href=\"#code-link\" aria-label=\"code link permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code link</h3>\n<blockquote>\n<p>Complete working code till here can be found at:</p>\n<p><a href=\"https://github.com/a7ul/blog-graphql-auth-example\">https://github.com/a7ul/blog-graphql-auth-example</a> under the tag <strong>field-auth</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/a7ul/blog-graphql-auth-example\ncd blog-graphql-auth-example\ngit checkout field-auth</code></pre></div>\n<p>or visit <a href=\"https://github.com/a7ul/blog-graphql-auth-example/tree/field-auth\">https://github.com/a7ul/blog-graphql-auth-example/tree/field-auth</a></p>\n</blockquote>\n<h2 id=\"type-level-authorization\" style=\"position:relative;\"><a href=\"#type-level-authorization\" aria-label=\"type level authorization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type level authorization</h2>\n<p>At first glance, field level authorization seems to be a great approach. However, it is not enough to completely protect our GraphQL schema. Since GraphQL schema is a tree, it could be possible to access the same information via multiple paths.</p>\n<p>For example, consider the following schema:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Should only be accessible by employees with read access to customer data</span>\n  <span class=\"token attr-name\">customers</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">]</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"customer:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># Should only be accessible only to the currently logged in customer</span>\n  <span class=\"token attr-name\">me</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Customer</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"self:customer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># Should only be accessible by employees with read access to invoice data</span>\n  <span class=\"token attr-name\">getCustomerInvoices</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">customerId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Invoice</span><span class=\"token punctuation\">]</span>\n    <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"invoice:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">invoices</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Invoice</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">internalNote</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"notes:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Invoice</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">customerId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">amount</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Float</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, we want to only allow users with permission <strong>invoice:read</strong> to access the customer invoices. To do so we added a field level authorization directive <strong>@auth(permissions: [“invoice:read”])</strong> to our query <strong>getCustomerInvoices</strong>.</p>\n<p>But, the invoice for a customer is also exposed via the type Customer’s <strong>invoices</strong> field. Hence, a user with <strong>customer:read</strong> can read a customer’s invoice even if they dont have the <strong>invoice:read</strong> permission via the query</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token object\">customers</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">id</span>\n    <span class=\"token object\">invoice</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">id</span>\n      <span class=\"token property\">amount</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A quick fix for this issue would be to add a <strong>@auth</strong> directive to the type Customer’s <strong>invoices</strong> field. But, this feels like we have to manually keep track of new fields that are added to the schema and add <strong>@auth</strong> to block access. This is error prone and can cause accidental leaks. Ideally, our auth system should be designed in a way that it prevents this behaviour by default.</p>\n<p><strong>The solution</strong> to this problem is to make it possible to add a <strong>@auth</strong> directive at the <strong>type level</strong>.</p>\n<p>We could add <strong>@auth</strong> to the type <strong>Invoice</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Should only be accessible by employees with read access to customer data</span>\n  <span class=\"token attr-name\">customers</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">]</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"customer:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token attr-name\">me</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Customer</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"self:customer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># Should only be accessible by employees with read access to invoice data</span>\n  <span class=\"token attr-name\">getCustomerInvoices</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">customerId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Invoice</span><span class=\"token punctuation\">]</span>\n    <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"invoice:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">invoices</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Invoice</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">internalNote</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"notes:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Now the fields of Invoice require `invoice:read` permission by default</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Invoice</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"invoice:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">customerId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">amount</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Float</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By adding <strong>@auth to the type Invoice</strong>, we are saying that by default all the fields of the type <strong>Invoice</strong> will be accessible only to users with permission <strong>invoice:read</strong>. Hence, even if you a user can read the type <strong>Invoice</strong>, they will not be able to read the fields of the the type if they dont have the permission <strong>invoice:read</strong>.</p>\n<p>Both of these are essentially equivalent:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Invoice</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"invoice:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">customerId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">amount</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Float</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Invoice</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"invoice:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">customerId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"invoice:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">amount</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Float</span><span class=\"token operator\">!</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"invoice:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"code-1\" style=\"position:relative;\"><a href=\"#code-1\" aria-label=\"code 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h3>\n<p>In order to allow <strong>@auth</strong> directive to be specified at the type level we need to change its declaration in the schema as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token comment\"># Definition</span>\n<span class=\"token keyword\">directive</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">on</span> <span class=\"token constant\">FIELD_DEFINITION</span> <span class=\"token operator\">|</span> <span class=\"token constant\">OBJECT</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Usage: field level</span>\n  <span class=\"token attr-name\">getCustomerInvoices</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">customerId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Invoice</span><span class=\"token punctuation\">]</span>\n    <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"invoice:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Usage: type level</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Invoice</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"invoice:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">customerId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">amount</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Float</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, before we modify our <code class=\"language-text\">getAuthorizedSchema</code> function to support <strong>@auth</strong> directive at the type level,</p>\n<p>let add a new function <code class=\"language-text\">gatherTypePermissions</code> which will parse through the schema and return a map of types and their permissions.</p>\n<p><strong>src/graphql/directives.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">gatherTypePermissions</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">schema</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Create a map to store a type and its permissions</span>\n  <span class=\"token keyword\">const</span> typePermissionMapping <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">mapSchema</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2. Executes once for each type definition in the schema</span>\n    <span class=\"token punctuation\">[</span>MapperKind<span class=\"token punctuation\">.</span><span class=\"token constant\">OBJECT_TYPE</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">typeConfig</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> typeAuthDirective <span class=\"token operator\">=</span> <span class=\"token function\">getDirective</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span> typeConfig<span class=\"token punctuation\">,</span> <span class=\"token string\">'auth'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> typeLevelPermissions <span class=\"token operator\">=</span> typeAuthDirective<span class=\"token operator\">?.</span>permissions <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token comment\">// 3. Collect permissions for each type</span>\n      typePermissionMapping<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>typeConfig<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> typeLevelPermissions<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> typeConfig\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> typePermissionMapping\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, lets modify <code class=\"language-text\">getAuthorizedSchema</code> to use the type level permissions.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">export function getAuthorizedSchema(schema) {\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>  const typePermissionMapping = gatherTypePermissions(schema);\n<span class=\"token prefix inserted\">+</span>\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>  const authorizedSchema = mapSchema(schema, {\n<span class=\"token prefix unchanged\"> </span>    // Executes once for each object field definition in the schema\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>    [MapperKind.OBJECT_FIELD]: (fieldConfig) => {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>    [MapperKind.OBJECT_FIELD]: (fieldConfig, fieldName, typeName) => {\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>      // 1. Try to get the @auth directive config on the field\n<span class=\"token prefix unchanged\"> </span>      const fieldAuthDirective = getDirective(schema, fieldConfig, \"auth\")?.[0];\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>      // 1.1 Get the permissions for the field\n<span class=\"token prefix inserted\">+</span>      const fieldPermissions = fieldAuthDirective?.permissions ?? [];\n<span class=\"token prefix inserted\">+</span>      // 1.1 Get the permissions for the field's type\n<span class=\"token prefix inserted\">+</span>      const typePermissions = typePermissionMapping.get(typeName) ?? [];\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>      // 2. If a @auth directive is found, replace the field's resolver with a custom resolver\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>      if (fieldAuthDirective) {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>      if (fieldPermissions.length > 0 || typePermissions.length > 0) {\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>        // 2.1. Get the original resolver on the field\n<span class=\"token prefix unchanged\"> </span>        const originalResolver = fieldConfig.resolve ?? defaultFieldResolver;\n<span class=\"token prefix unchanged\"> </span>        // 2.2. Replace the field's resolver with a custom resolver\n<span class=\"token prefix unchanged\"> </span>        fieldConfig.resolve = (source, args, context, info) => {\n<span class=\"token prefix unchanged\"> </span>          const user = context.user;\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>          const fieldPermissions = fieldAuthDirective.permissions;\n<span class=\"token prefix deleted\">-</span>          if (!isAuthorized(fieldPermissions, user)) {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>          if (!isAuthorized(fieldPermissions, typePermissions, user)) {\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>            // 2.3 If the user doesn't have the required permissions, throw an error\n<span class=\"token prefix unchanged\"> </span>            throw new ForbiddenError(\"Unauthorized\");\n<span class=\"token prefix unchanged\"> </span>          }</span></code></pre></div>\n<p>and finally add support for <strong>typePermissions</strong> to <strong>isAuthorized</strong> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>function isAuthorized(fieldPermissions, user) {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>function isAuthorized(fieldPermissions, typePermissions, user) {\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>  const userRoles = user?.roles ?? [];\n<span class=\"token prefix unchanged\"> </span>  const userPermissions = new Set();\n<span class=\"token prefix unchanged\"> </span>  // 1. Expand user roles to permissions\n</span>@@ -18,25 +18,55 @@ function isAuthorized(fieldPermissions, user) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>      return true;\n<span class=\"token prefix unchanged\"> </span>    }\n<span class=\"token prefix unchanged\"> </span>  }\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>\n<span class=\"token prefix inserted\">+</span>  // 3. if there are no field permissions then check if the type has permissions\n<span class=\"token prefix inserted\">+</span>  if (fieldPermissions.length === 0) {\n<span class=\"token prefix inserted\">+</span>    for (const typePermission of typePermissions) {\n<span class=\"token prefix inserted\">+</span>      if (userPermissions.has(typePermission)) {\n<span class=\"token prefix inserted\">+</span>        return true;\n<span class=\"token prefix inserted\">+</span>      }\n<span class=\"token prefix inserted\">+</span>    }\n<span class=\"token prefix inserted\">+</span>  }\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>  return false;\n<span class=\"token prefix unchanged\"> </span>}\n</span></code></pre></div>\n<p>Now the following query should return unauthorized error for a user with only <code class=\"language-text\">customer:read</code> and no <code class=\"language-text\">invoice:read</code> permission, since the invoice fields now required <code class=\"language-text\">invoice:read</code> permission.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token object\">customers</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">id</span>\n    <span class=\"token object\">invoice</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">id</span>\n      <span class=\"token property\">amount</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<h3 id=\"side-note\" style=\"position:relative;\"><a href=\"#side-note\" aria-label=\"side note permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Side note</h3>\n<p>The type level <strong>@auth</strong> directive is for assigning default permissions to the fields of a type but if needed we could always override the permissions for a field of a type by adding a field level <strong>@auth</strong> directive.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Invoice</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"invoice:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">customerId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">amount</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Float</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">signedBy</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Admin</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"admin:read\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Admin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here all fields of the type <strong>Invoice</strong> will have the default <strong>invoice:read</strong> permission but the field <strong>signedBy</strong> will only have <strong>admin:read</strong> permission.</p>\n</blockquote>\n<h3 id=\"code-link-1\" style=\"position:relative;\"><a href=\"#code-link-1\" aria-label=\"code link 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code link</h3>\n<blockquote>\n<p>Complete working code till here can be found at:</p>\n<p><a href=\"https://github.com/a7ul/blog-graphql-auth-example\">https://github.com/a7ul/blog-graphql-auth-example</a> under the tag <strong>type-auth</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/a7ul/blog-graphql-auth-example\ncd blog-graphql-auth-example\ngit checkout type-auth</code></pre></div>\n<p>or visit <a href=\"https://github.com/a7ul/blog-graphql-auth-example/tree/type-auth\">https://github.com/a7ul/blog-graphql-auth-example/tree/type-auth</a></p>\n</blockquote>\n<h2 id=\"deny-first-and-explicit-authorization\" style=\"position:relative;\"><a href=\"#deny-first-and-explicit-authorization\" aria-label=\"deny first and explicit authorization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deny first and explicit authorization</h2>\n<p>With type + field level authorization, we now get a lot of control over managing access to the data graph. But in the current approach we consider a field without an <strong>@auth</strong> directive as <strong>publicly accessible</strong>. This approach is essentially a blocklist approach, ie, we are blocking access by adding <strong>@auth</strong>. But, following the principle of least privilege, we should be doing the reverse. We should be denying access to fields by default and only open up access if a field has an <strong>@auth</strong> directive specified. This way our auth system would automatically prevent fields that were accidentally exposed without a <strong>@auth</strong> directive. And if we need few fields to be public we could annotate those fields with a special permission (For example: <strong>@auth(permissions: [‘self:anyone’])</strong>) so that our <strong>@auth</strong> directive can skip authorization on. This way as the schema grows, we can be explicit about and keep track of these publicly accessible fields along with avoiding unintentional leaks.</p>\n<p>Lets take an example to understand this better:</p>\n<p><strong>Schema without explicit deny first approach</strong> ❌</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Missed adding an @auth for custoers query accidentally,</span>\n  <span class=\"token comment\"># but now its public by default and is sensitive</span>\n  <span class=\"token comment\"># This is bad ❌</span>\n  <span class=\"token attr-name\">customers</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># Public health query - this is public by default</span>\n  <span class=\"token comment\"># and its okay since its non sensitive ✅</span>\n  <span class=\"token attr-name\">health</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">me</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Customer</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"self:customer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> ✅\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>vs</strong></p>\n<p><strong>Schema with explicit DENY-FIST approach</strong> ✅</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Missed adding an @auth for customers query accidentally,</span>\n  <span class=\"token comment\"># but now its denied by default so its not accessible to anyone</span>\n  <span class=\"token comment\"># This is good since it prevented accidental leak ✅</span>\n  <span class=\"token attr-name\">customers</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># Public health query - Since we added @auth here and</span>\n  <span class=\"token comment\"># explicitly marked it as publicly accessible with self:anyone,</span>\n  <span class=\"token comment\"># its accessible ✅</span>\n  <span class=\"token attr-name\">health</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permission</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"self:anyone\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">me</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Customer</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"self:customer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> ✅\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"code-2\" style=\"position:relative;\"><a href=\"#code-2\" aria-label=\"code 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h3>\n<p>In order to implement a deny first approach we need to make minor tweaks to our <strong>getAuthorizedSchema</strong> function.</p>\n<p>But before that lets add a new helper function <strong>shouldDenyByDefault</strong> that will return true if the field is not explicitly authorized.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">shouldDenyFieldByDefault</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fieldPermissions<span class=\"token punctuation\">,</span> typePermissions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Check if a field has either field or type permissions</span>\n  <span class=\"token comment\">// If no, then return true (meaning deny this field)</span>\n  <span class=\"token keyword\">const</span> hasNoPermissions <span class=\"token operator\">=</span>\n    fieldPermissions<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> typePermissions<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> hasNoPermissions\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next we modify the <strong>getAuthorizedSchema</strong> function to check if the field is explicitly authorized.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>export function getAuthorizedSchema(schema) {\n<span class=\"token prefix unchanged\"> </span>  const typePermissionMapping = gatherTypePermissions(schema);\n</span>\n@@ -56,9 +63,21 @@ export function getAuthorizedSchema(schema) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>      const fieldAuthDirective = getDirective(schema, fieldConfig, \"auth\")?.[0];\n<span class=\"token prefix unchanged\"> </span>      // 1.1 Get the permissions for the field\n<span class=\"token prefix unchanged\"> </span>      const fieldPermissions = fieldAuthDirective?.permissions ?? [];\n<span class=\"token prefix unchanged\"> </span>      // 1.2 Get the permissions for the field's type\n<span class=\"token prefix unchanged\"> </span>      const typePermissions = typePermissionMapping.get(typeName) ?? [];\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>      // 1.3 Check if field should be denied by default\n<span class=\"token prefix inserted\">+</span>      if (shouldDenyFieldByDefault(fieldPermissions, typePermissions)) {\n<span class=\"token prefix inserted\">+</span>        // Replace, the resolver with a ForbiddenError throwing function.\n<span class=\"token prefix inserted\">+</span>        // Optionally log here so it shows up while the server starts\n<span class=\"token prefix inserted\">+</span>        fieldConfig.resolve = () => {\n<span class=\"token prefix inserted\">+</span>          throw new ForbiddenError(\n<span class=\"token prefix inserted\">+</span>            `No access control specified for ${typeName}.${fieldName}. Deny by default`\n<span class=\"token prefix inserted\">+</span>          );\n<span class=\"token prefix inserted\">+</span>        };\n<span class=\"token prefix inserted\">+</span>        return fieldConfig;\n<span class=\"token prefix inserted\">+</span>      }\n<span class=\"token prefix inserted\">+</span>\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>      // 2. If a @auth directive is found, replace the field's resolver with a custom resolver\n<span class=\"token prefix unchanged\"> </span>      if (fieldPermissions.length > 0 || typePermissions.length > 0) {\n<span class=\"token prefix unchanged\"> </span>        // 2.1. Get the original resolver on the field\n</span></code></pre></div>\n<p>Now for this schema, if we make</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Missed adding an @auth for customers query accidentally here</span>\n  <span class=\"token attr-name\">customers</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\"># Public health query - should be publicly accessible</span>\n  <span class=\"token comment\"># explicitly marked it as publicly accessible with self:anyone,</span>\n  <span class=\"token attr-name\">health</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permission</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"self:anyone\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">me</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Customer</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"self:customer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then the following query will fail with a ForbiddenError since its now deny by default.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token object\">customers</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">id</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sweet! But we have a slight problem. Now if we try to make a query like so</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">health</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then the following query also fails with a <strong>ForbiddenError</strong> even though we marked it with <strong>@auth(permission: [“self:anyone”])</strong>.\nThis is because our <strong>@auth</strong> directive doesnt know yet that it has to allow access to any field / type marked with <strong>@auth(permission: [“self:anyone”])</strong>.</p>\n<p>Lets fix that by modifying our <strong>isAuthorized</strong> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>function isAuthorized(fieldPermissions, typePermissions, user) {\n<span class=\"token prefix unchanged\"> </span>  const userRoles = user?.roles ?? [];\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>  const userPermissions = new Set();\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>  // Add self:anyone to user permissions by default\n<span class=\"token prefix inserted\">+</span>  const userPermissions = new Set([\"self:anyone\"]);\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>  // 1. Expand user roles to permissions\n<span class=\"token prefix unchanged\"> </span>  userRoles.forEach((roleKey) => {\n<span class=\"token prefix unchanged\"> </span>    const role = RolePermissions[roleKey] ?? RolePermissions.anonymous;\n</span>@@ -46,6 +47,12 @@ function gatherTypePermissions(schema) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>  return typePermissionMapping;\n<span class=\"token prefix unchanged\"> </span>}</span></code></pre></div>\n<h3 id=\"caveats-to-deny-by-default-approach\" style=\"position:relative;\"><a href=\"#caveats-to-deny-by-default-approach\" aria-label=\"caveats to deny by default approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveats to deny by default approach</h3>\n<ul>\n<li>\n<p><strong>Deny by default approach is applied to all types and fields irrespective of whether they are top level types or not</strong>.\nLets take the following schema as an example</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Should be accessible to all users</span>\n  <span class=\"token attr-name\">login</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AccessToken</span><span class=\"token operator\">!</span> <span class=\"token directive function\">@auth</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">permissions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"self:anyone\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AccessToken</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">token</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we now make the following query</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query property-mutation\">login</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">token</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We would expect that the query would succeed since we explicitly marked the mutation with <strong>self:anyone</strong>.\nBut it should fail because the mutation returns a type <strong>AccessToken</strong> whose field dont have any permissions. So the fields of the AccessToken type are also denied by default.</p>\n<p>To fix this we add a <strong>@auth(permission: [“self:anyone”])</strong> to the AccessToken type like so.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>type AccessToken {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>type AccessToken @auth(permissions: [\"self:anyone\"]) {\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>  token: String\n<span class=\"token prefix unchanged\"> </span>}</span></code></pre></div>\n</li>\n<li>\n<p><strong>We should skip internal apollo types otherwise our directive will deny them too by default</strong>.\nApollo has some types and fields that it uses internally. For example, <strong>__typename</strong>, <strong>_entities</strong>, <strong>_service</strong>, etc\nWe should skip these types and fields from our <strong>@auth</strong> directive</p>\n<p>To skip these we can make the following change to <strong>shouldDenyFieldByDefault</strong> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>function shouldDenyFieldByDefault(fieldPermissions, typePermissions) {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>function shouldDenyFieldByDefault(\n<span class=\"token prefix inserted\">+</span>  fieldPermissions,\n<span class=\"token prefix inserted\">+</span>  typePermissions,\n<span class=\"token prefix inserted\">+</span>  fieldName,\n<span class=\"token prefix inserted\">+</span>  typeName\n<span class=\"token prefix inserted\">+</span>) {\n<span class=\"token prefix inserted\">+</span>  if (fieldName.startsWith(\"_\") || typeName.startsWith(\"_\")) {\n<span class=\"token prefix inserted\">+</span>    // Apollo's internal fields / types start with _\n<span class=\"token prefix inserted\">+</span>    return false;\n<span class=\"token prefix inserted\">+</span>  }\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>  const hasNoPermissions =\n<span class=\"token prefix unchanged\"> </span>    fieldPermissions.length === 0 &amp;&amp; typePermissions.length === 0;\n<span class=\"token prefix unchanged\"> </span>  return hasNoPermissions;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"code-link-2\" style=\"position:relative;\"><a href=\"#code-link-2\" aria-label=\"code link 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code link</h3>\n<blockquote>\n<p>Complete working code till here can be found at:</p>\n<p><a href=\"https://github.com/a7ul/blog-graphql-auth-example\">https://github.com/a7ul/blog-graphql-auth-example</a> under the tag <strong>deny-by-default</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/a7ul/blog-graphql-auth-example\ncd blog-graphql-auth-example\ngit checkout deny-by-default</code></pre></div>\n<p>or visit <a href=\"https://github.com/a7ul/blog-graphql-auth-example/tree/deny-by-default\">https://github.com/a7ul/blog-graphql-auth-example/tree/deny-by-default</a></p>\n</blockquote>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>GraphQL is a really powerful tool for building apis that are versionless and well documented. As we introduce more types and fields to our schema, we need to make sure that we do so in a secure way. The <strong>@auth</strong> directive in this post allows us to introduce security with to our schema with following characteristics:</p>\n<ul>\n<li><strong>Declarative</strong> - We can use our schema as a documentation and source of truth for authorization.</li>\n<li><strong>Flexible</strong> - Type and field permissions allows us to introduce RBAC with ease without sacrificing DX.</li>\n<li><strong>Deny first and explicit authorization</strong> - Follows the principle of least privilege, so we deny access to fields that are not explicitly authorized in order to prevent accidental access to sensitive data.</li>\n</ul>\n<blockquote>\n<p>The entire code for this post can be found at: <a href=\"https://github.com/a7ul/blog-graphql-auth-example\">https://github.com/a7ul/blog-graphql-auth-example</a></p>\n</blockquote>\n<h1 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h1>\n<ul>\n<li><a href=\"https://www.apollographql.com/docs/apollo-server/security/authentication/\">https://www.apollographql.com/docs/apollo-server/security/authentication/</a></li>\n<li><a href=\"https://www.apollographql.com/docs/apollo-server/schema/creating-directives\">https://www.apollographql.com/docs/apollo-server/schema/creating-directives</a></li>\n</ul>","headings":[{"value":"Authentication","depth":1},{"value":"apollo-server (Apollo Server)","depth":2},{"value":"apollo-server-express (Apollo Server Express)","depth":2},{"value":"Infrastructure layer","depth":2},{"value":"Authorization","depth":1},{"value":"Basic all or nothing approach","depth":2},{"value":"Role based access control or RBAC","depth":2},{"value":"Roles","depth":3},{"value":"Permissions","depth":3},{"value":"Linking roles and permissions","depth":3},{"value":"Implementation of @auth","depth":1},{"value":"Field level authorization","depth":2},{"value":"Code","depth":3},{"value":"Code link","depth":3},{"value":"Type level authorization","depth":2},{"value":"Code","depth":3},{"value":"Side note","depth":3},{"value":"Code link","depth":3},{"value":"Deny first and explicit authorization","depth":2},{"value":"Code","depth":3},{"value":"Caveats to deny by default approach","depth":3},{"value":"Code link","depth":3},{"value":"Summary","depth":1},{"value":"References","depth":1}],"frontmatter":{"title":"🦄 Authentication, authorization and RBAC for GraphQL Servers in depth","slug":"graphql-auth","date":"June 14, 2022","keywords":"graphql, apollo, authentication, federation, supergraph, jwt, authorization, deny, rbac"}}},"pageContext":{"id":"760ea8de-2aa0-5086-95e7-4ef3a6ddb511","frontmatter__slug":"graphql-auth","__params":{"frontmatter__slug":"graphql-auth"}}},"staticQueryHashes":[]}