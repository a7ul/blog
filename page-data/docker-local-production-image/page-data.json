{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/docker-local-production-image/","result":{"data":{"site":{"siteMetadata":{"title":"Blog","author":"Atul R"}},"markdownRemark":{"id":"f06ade09-c89c-5186-9d11-0f65bc1d0876","excerpt":"If you haven’t read my previous post on how to use Docker for local development. I highly recommend you read it before this. At Anyfin, we have completely embraced docker for both local development environment and production deployments. Using Docker…","html":"<p><em>If you haven’t read my previous post on <a href=\"/docker-local-environment/\">how to use Docker for local development</a>. I highly recommend you read it before this.</em></p>\n<p>At Anyfin, we have completely embraced docker for both local development environment and production deployments. Using Docker in local development allows us to maintain a consistent environment on everyone’s machine irrespective of their installed OS or dependencies. Hence, if we were to bump up a dependency like Node.js version for a service it propagates to all the developers when they do a git pull.</p>\n<p>To explain it better, let’s take an example.</p>\n<blockquote>\n<p>The complete source code used in this repo can be found here: <a href=\"https://github.com/a7ul/blog-same-docker-local-prod-example\">https://github.com/a7ul/blog-same-docker-local-prod-example</a></p>\n</blockquote>\n<h2 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<p>Let’s say we have a backend Node.js service called <strong>api-service</strong> which depends on postgres database.</p>\n<p><img src=\"/665f51474163db5c2751730d294fb374/architecture.svg\" alt=\"example architecture\"></p>\n<p>A typical setup would have three parts:</p>\n<ul>\n<li>The application source code.</li>\n<li>A Dockerfile for building our production app.</li>\n<li>A docker-compose file for local dev setup. This will help us spin up both the service and a postgres instance.</li>\n</ul>\n<p>The folder structure can look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span>\n├── api\n│   ├── <span class=\"token constant\">README</span><span class=\"token punctuation\">.</span>md\n│   ├── index<span class=\"token punctuation\">.</span>js\n│   ├── <span class=\"token keyword\">package</span><span class=\"token operator\">-</span>lock<span class=\"token punctuation\">.</span>json\n│   ├── <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json\n│   ├── Dockerfile<span class=\"token punctuation\">.</span>development <span class=\"token comment\">// development docker file</span>\n│   └── Dockerfile <span class=\"token comment\">// production docker file</span>\n└── docker<span class=\"token operator\">-</span>compose<span class=\"token punctuation\">.</span>yml\n</code></pre></div>\n<p><code class=\"language-text\">docker-compose.yml</code></p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span>\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">postgres-data</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">api</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./api\"</span>\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Dockerfile.development\"</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> sh <span class=\"token punctuation\">-</span>c \"yarn install <span class=\"token important\">&amp;&amp;</span> yarn start\"\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> NODE_ENV=development\n      <span class=\"token punctuation\">-</span> PORT=5000\n      <span class=\"token punctuation\">-</span> DATABASE_LOGIN_URL=postgres<span class=\"token punctuation\">:</span>//postgres<span class=\"token punctuation\">:</span>secret@db/postgres\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'5000:5000'</span>\n    <span class=\"token key atrule\">working_dir</span><span class=\"token punctuation\">:</span> /root/app\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./api<span class=\"token punctuation\">:</span>/root/app<span class=\"token punctuation\">:</span>cached <span class=\"token comment\"># &lt;--- This will map ./api to /root/app inside the container.</span>\n  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres<span class=\"token punctuation\">:</span><span class=\"token number\">13</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> postgres<span class=\"token punctuation\">-</span>data<span class=\"token punctuation\">:</span>/var/lib/postgresql/data<span class=\"token punctuation\">:</span>delegated\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> POSTGRES_USER=postgres\n      <span class=\"token punctuation\">-</span> POSTGRES_PASSWORD=secret\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 5432<span class=\"token punctuation\">:</span><span class=\"token number\">5432</span>\n</code></pre></div>\n<p><code class=\"language-text\">./api/Dockerfile.development</code> - development docker image</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">FROM node<span class=\"token operator\">:</span><span class=\"token number\">16</span><span class=\"token operator\">-</span>alpine\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">Some extra deps<span class=\"token punctuation\">.</span> For example graphicsmagick <span class=\"token keyword\">for</span> a npm module like gm</span></span>\nRUN apk add <span class=\"token operator\">--</span>update graphicsmagick\n</code></pre></div>\n<p><code class=\"language-text\">./api/Dockerfile</code> - production docker image</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">FROM node<span class=\"token operator\">:</span><span class=\"token number\">16</span><span class=\"token operator\">-</span>alpine\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">Some extra deps<span class=\"token punctuation\">.</span> For example graphicsmagick <span class=\"token keyword\">for</span> a npm module like gm</span></span>\nRUN apk add <span class=\"token operator\">--</span>update graphicsmagick\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">Create a work directory</span></span>\nWORKDIR <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>node<span class=\"token operator\">/</span>app\n\nCOPY package<span class=\"token punctuation\">.</span>json yarn<span class=\"token punctuation\">.</span>lock <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>\n\nRUN yarn install <span class=\"token operator\">--</span>production\n\nCOPY <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>In order to run locally we would do:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">docker-compose up api</code></pre></div>\n<p>and for building production docker image we could do</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">cd api\ndocker build . -t api:latest</code></pre></div>\n<h2 id=\"issues-with-this-approach\" style=\"position:relative;\"><a href=\"#issues-with-this-approach\" aria-label=\"issues with this approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Issues with this approach</h2>\n<p>We were using this setup for a while but over time we realised that anytime we update a dependency we have to update both Dockerfiles.\nThis was manual and if not done properly could lead to us using different dependencies for development and production.\nHence, we tried to merge both the Dockerfiles into one.</p>\n<h2 id=\"multi-stage-dockerfiles-to-the-rescue\" style=\"position:relative;\"><a href=\"#multi-stage-dockerfiles-to-the-rescue\" aria-label=\"multi stage dockerfiles to the rescue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multi stage Dockerfiles to the rescue</h2>\n<p>Multi stage Dockerfile has multiple stages inside the same Dockerfile. This implies that we can have multiple docker images from the same Dockerfile.</p>\n<p>With multi stage dockerfile our setup will now only have a single Dockferfile for both production build and local development.</p>\n<p><code class=\"language-text\">./api/Dockerfile</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">base</span> <span class=\"token expression\">image contains the dependencies and no application code</span></span>\nFROM node<span class=\"token operator\">:</span><span class=\"token number\">16</span><span class=\"token operator\">-</span>alpine as base  \n\nRUN apk add <span class=\"token operator\">--</span>update graphicsmagick\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">prod</span> <span class=\"token expression\">image inherits from base and adds application code</span></span>\nFROM base as prod \n\nWORKDIR <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>node<span class=\"token operator\">/</span>app\nCOPY package<span class=\"token punctuation\">.</span>json yarn<span class=\"token punctuation\">.</span>lock <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>\nRUN yarn install <span class=\"token operator\">--</span>production\nCOPY <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>And we will now change our docker-compose file to:</p>\n<p><code class=\"language-text\">docker-compose.yml</code></p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">\nversion: '3.8'\nvolumes:\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> postgres-data:\n</span>services:\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> api:\n<span class=\"token prefix unchanged\"> </span>  build:\n<span class=\"token prefix unchanged\"> </span>    context: \"./api\"\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>    dockerfile: \"Dockerfile.development\"\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>    target: \"base\"   # We specify which stage of the dockerfile to use\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   command: sh -c \"yarn install &amp;&amp; yarn start\"\n<span class=\"token prefix unchanged\"> </span>   environment:\n<span class=\"token prefix unchanged\"> </span>     - NODE_ENV=development\n<span class=\"token prefix unchanged\"> </span>     - PORT=5000\n<span class=\"token prefix unchanged\"> </span>     - DATABASE_LOGIN_URL=postgres://postgres:secret@db/postgres\n<span class=\"token prefix unchanged\"> </span>   ports:\n<span class=\"token prefix unchanged\"> </span>     - '5000:5000'\n<span class=\"token prefix unchanged\"> </span>   working_dir: /root/app\n<span class=\"token prefix unchanged\"> </span>   volumes:\n<span class=\"token prefix unchanged\"> </span>     - ./api:/root/app:cached\n<span class=\"token prefix unchanged\"> </span> db:\n<span class=\"token prefix unchanged\"> </span>   image: postgres:13\n<span class=\"token prefix unchanged\"> </span>   volumes:\n<span class=\"token prefix unchanged\"> </span>     - postgres-data:/var/lib/postgresql/data:delegated\n<span class=\"token prefix unchanged\"> </span>   environment:\n<span class=\"token prefix unchanged\"> </span>     - POSTGRES_USER=postgres\n<span class=\"token prefix unchanged\"> </span>     - POSTGRES_PASSWORD=secret\n<span class=\"token prefix unchanged\"> </span>   ports:\n<span class=\"token prefix unchanged\"> </span>     - 5432:5432 \n</span></code></pre></div>\n<p>In order to run locally we would do:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">docker-compose up api</code></pre></div>\n<p>and for building production docker image we could do</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">cd api\ndocker build . -t api:latest</code></pre></div>\n<p>This way each service can just specify one single Dockerfile and we could reuse it for both development and production 🚀</p>\n<p>In a future post I will cover on how we could use multi stage dockerfile to keep our production image sizes down.</p>","headings":[{"value":"Example","depth":2},{"value":"Issues with this approach","depth":2},{"value":"Multi stage Dockerfiles to the rescue","depth":2}],"frontmatter":{"title":"🐳 Use the same Dockerfile for both local development and production with multi-stage builds","slug":"docker-local-production-image","date":"July 28, 2021","keywords":"docker, local, development, production, multistage, guide, javascript"}}},"pageContext":{"id":"f06ade09-c89c-5186-9d11-0f65bc1d0876","frontmatter__slug":"docker-local-production-image","__params":{"frontmatter__slug":"docker-local-production-image"}}},"staticQueryHashes":[]}